// WeConnect V2 Database Schema
// Advanced Workflow Automation Platform

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// USER MANAGEMENT DOMAIN
// ================================

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  password       String
  firstName      String
  lastName       String
  organizationId String?
  role           UserRole  @default(USER)
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastLoginAt    DateTime?

  // Relations
  organization Organization? @relation(fields: [organizationId], references: [id])
  workflows    Workflow[]
  executions   Execution[]
  credentials  Credential[]
  apiKeys      ApiKey[]

  @@map("users")
}

model Organization {
  id          String             @id @default(cuid())
  name        String
  slug        String             @unique
  description String?
  isActive    Boolean            @default(true)
  plan        OrganizationPlan   @default(FREE)
  limits      Json               @default("{\"maxUsers\": 5, \"maxWorkflows\": 10, \"maxExecutionsPerMonth\": 1000, \"maxStorageGB\": 1}")
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relations
  users       User[]
  workflows   Workflow[]
  credentials Credential[]

  @@map("organizations")
}

model ApiKey {
  id        String    @id @default(cuid())
  name      String
  key       String    @unique
  userId    String
  isActive  Boolean   @default(true)
  expiresAt DateTime?
  lastUsed  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

// ================================
// WORKFLOW DOMAIN
// ================================

model Workflow {
  id             String      @id @default(cuid())
  name           String
  description    String?
  userId         String
  organizationId String?
  isActive       Boolean     @default(true)
  version        Int         @default(1)
  settings       Json        @default("{}")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization?  @relation(fields: [organizationId], references: [id])
  nodes        WorkflowNode[]
  connections  WorkflowConnection[]
  executions   Execution[]
  versions     WorkflowVersion[]
  shares       WorkflowShare[]
  webhooks     Webhook[]
  schedules    Schedule[]

  @@map("workflows")
}

model WorkflowNode {
  id         String   @id @default(cuid())
  workflowId String
  type       NodeType
  name       String
  position   Json     // {x: number, y: number}
  data       Json     @default("{}")
  config     Json     @default("{}")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  workflow        Workflow             @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  sourceConnections WorkflowConnection[] @relation("SourceNode")
  targetConnections WorkflowConnection[] @relation("TargetNode")
  executionSteps    ExecutionStep[]
  webhooks          Webhook[]

  @@map("workflow_nodes")
}

model WorkflowConnection {
  id           String @id @default(cuid())
  workflowId   String
  sourceNodeId String
  targetNodeId String
  sourceHandle String?
  targetHandle String?

  // Relations
  workflow   Workflow     @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  sourceNode WorkflowNode @relation("SourceNode", fields: [sourceNodeId], references: [id], onDelete: Cascade)
  targetNode WorkflowNode @relation("TargetNode", fields: [targetNodeId], references: [id], onDelete: Cascade)

  @@map("workflow_connections")
}

model WorkflowVersion {
  id         String   @id @default(cuid())
  workflowId String
  version    Int
  data       Json     // Complete workflow snapshot
  message    String?
  createdAt  DateTime @default(now())

  // Relations
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, version])
  @@map("workflow_versions")
}

model WorkflowShare {
  id         String          @id @default(cuid())
  workflowId String
  sharedWith String          // User ID or email
  permission SharePermission @default(VIEW)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  // Relations
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, sharedWith])
  @@map("workflow_shares")
}

// ================================
// EXECUTION DOMAIN
// ================================

model Execution {
  id         String          @id @default(cuid())
  workflowId String
  userId     String
  status     ExecutionStatus @default(PENDING)
  startedAt  DateTime        @default(now())
  finishedAt DateTime?
  duration   Int?            // in milliseconds
  input      Json?
  output     Json?
  error      Json?
  metadata   Json            @default("{}")
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  // Relations
  workflow Workflow        @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  steps    ExecutionStep[]
  logs     ExecutionLog[]

  @@map("executions")
}

model ExecutionStep {
  id          String          @id @default(cuid())
  executionId String
  nodeId      String
  nodeName    String
  status      ExecutionStatus @default(PENDING)
  startedAt   DateTime        @default(now())
  finishedAt  DateTime?
  duration    Int?            // in milliseconds
  input       Json?
  output      Json?
  error       Json?
  retryCount  Int             @default(0)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  execution Execution    @relation(fields: [executionId], references: [id], onDelete: Cascade)
  node      WorkflowNode @relation(fields: [nodeId], references: [id])
  logs      ExecutionLog[]

  @@map("execution_steps")
}

model ExecutionLog {
  id          String   @id @default(cuid())
  executionId String
  stepId      String?
  level       LogLevel @default(INFO)
  message     String
  metadata    Json?    @default("{}")
  timestamp   DateTime @default(now())

  // Relations
  execution Execution      @relation(fields: [executionId], references: [id], onDelete: Cascade)
  step      ExecutionStep? @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@map("execution_logs")
}

// ================================
// CREDENTIAL DOMAIN
// ================================

model Credential {
  id             String    @id @default(cuid())
  name           String
  connectorName  String
  userId         String
  organizationId String?
  data           String    // Encrypted JSON
  encryptionKeyId String   @default("default")
  oauthData      Json?     // OAuth tokens and refresh info
  testConnectionData Json? // Last connection test results
  metadata       Json      @default("{}")
  isActive       Boolean   @default(true)
  expiresAt      DateTime?
  lastUsed       DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization? @relation(fields: [organizationId], references: [id])

  @@map("credentials")
}

// ================================
// SYSTEM DOMAIN
// ================================

model SystemMetric {
  id        String   @id @default(cuid())
  name      String
  value     Float
  tags      Json?    @default("{}")
  timestamp DateTime @default(now())

  @@map("system_metrics")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  details   Json?    @default("{}")
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())

  @@map("audit_logs")
}

// ================================
// ADDITIONAL ADVANCED MODELS
// ================================

// Node Registry for Dynamic Nodes
model NodeDefinition {
  id              String   @id @default(cuid())
  name            String   @unique
  displayName     String
  description     String?
  category        String
  subcategory     String?
  version         String   @default("1.0.0")
  icon            String?
  color           String?  // Hex color
  properties      Json     // Node property schema
  credentials     Json     @default("[]")
  webhookMethods  String[] // Supported HTTP methods
  pollingConfig   Json?
  rateLimits      Json     @default("{}")
  documentationUrl String?
  isTrigger       Boolean  @default(false)
  isWebhook       Boolean  @default(false)
  isPolling       Boolean  @default(false)
  tags            String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("node_definitions")
}

// Webhooks
model Webhook {
  id               String   @id @default(cuid())
  workflowId       String
  nodeId           String
  path             String   @unique
  method           HttpMethod @default(POST)
  authentication  Json     @default("{}")
  rateLimiting     Json     @default("{}")
  requestValidation Json    @default("{}")
  responseConfig   Json     @default("{}")
  isActive         Boolean  @default(true)
  statistics       Json     @default("{}")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  node     WorkflowNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@map("webhooks")
}

// Schedules
model Schedule {
  id             String    @id @default(cuid())
  workflowId     String
  name           String?
  cronExpression String
  timezone       String    @default("UTC")
  isActive       Boolean   @default(true)
  nextExecution  DateTime?
  lastExecution  DateTime?
  executionCount Int       @default(0)
  maxExecutions  Int?
  retryConfig    Json      @default("{}")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("schedules")
}

// Real-time connections tracking
model RealtimeConnection {
  id           String   @id @default(cuid())
  userId       String
  connectionId String
  connectionType String // websocket, webrtc
  room         String?  // For grouping connections
  metadata     Json     @default("{}")
  connectedAt  DateTime @default(now())
  lastPing     DateTime @default(now())

  @@map("realtime_connections")
}

// Performance metrics
model PerformanceMetric {
  id          String   @id @default(cuid())
  entityType  String   // workflow, node, execution
  entityId    String
  metricName  String
  metricValue Decimal
  metricUnit  String?
  tags        Json     @default("{}")
  timestamp   DateTime @default(now())

  @@map("performance_metrics")
}

// ================================
// ENUMS
// ================================

enum UserRole {
  ADMIN
  USER
  VIEWER
}

enum OrganizationPlan {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum NodeType {
  TRIGGER
  ACTION
  CONDITION
  LOOP
  MERGE
  SPLIT
}

enum ExecutionStatus {
  PENDING
  RUNNING
  SUCCESS
  ERROR
  CANCELLED
  TIMEOUT
}

enum SharePermission {
  VIEW
  EDIT
  ADMIN
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
}

enum HttpMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
}

